<!DOCTYPE html>
<html>
<head>
    <title></title>
    <meta name="description" content="" />
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <!--[if lt IE 8]>
    <![endif]-->

    <script src="{{ url_for('static', filename='js/d3.v3.min.js') }}" charset="utf-8"></script>
    <script src="{{ url_for('static', filename='js/namespace.js') }}" charset="utf-8"></script>
    <script src="{{ url_for('static', filename='js/utils.js') }}" charset="utf-8"></script>
    <script src="{{ url_for('static', filename='js/models.js') }}" charset="utf-8"></script>
    <script src="{{ url_for('static', filename='js/views.js') }}" charset="utf-8"></script>

</head>
<body>
    <form action="" method="post" enctype="multipart/form-data">
        <input type="file" name="file" />
        <input type="submit" value="Upload" />
    </form>

    {% if data %}
    <svg width="100%" height="100%"></svg>

    <script type="text/javascript">
        var svg = d3.select('svg');

        var devs = {{ data.devs | tojson }};
        var replica2part2dev_id = {{ replica2part2dev_id | tojson }};
        var models = swiftsense.models.build_model(devs);
        var views = swiftsense.views.build_views(svg, models);

        // layout regions
        var region_ids = [];
        for (var k in views.regions) {
            region_ids.push(k);
        }
        region_ids.sort();

        var y_offset = 0;
        region_ids.forEach(function (d) {
            var region = views.regions[d];
            region.x = 160 * 2 + 40;
            region.y = y_offset
            region.update();
            y_offset += region.height + 10;
        });

        function draw_ring(x, y, data, inner, outer, colors) {
            var delta_angle = (Math.PI * 2) / data.length;
            var g = svg.selectAll('.arc')
                .data(data)
            .enter().append('g')
                .attr('transform', 'translate(' + x + ', ' + y + ')')
            ;
            g.append('path')
                .style('fill', function (d, i) {
                    return colors[d];
                })
                .attr('class', function (d) {
                    return 'ring-arc device-' + d;
                })
                .attr('d', function (d, i) {
                    return d3.svg.arc()
                        .innerRadius(inner)
                        .outerRadius(outer)
                        .startAngle(delta_angle * i)
                        .endAngle(delta_angle * (i + 1))()
                    ;
                })
            ;
            return g;
        }

        var colors = [];
        var delta = 360.0 / devs.length;
        for (var i = 0; i < devs.length; ++i) {
            var color = d3.hsl(delta * i, 0.9, 0.5);
            colors.push(color);
            views.devices[i].label_color = color;
            views.devices[i].update();
        }

        var radius_delta = 80 / replica2part2dev_id.length;
        replica2part2dev_id.forEach(function (d, i) {
            draw_ring(160, 160, d, 80 + i * radius_delta, 80 + (i + 1) * radius_delta, colors);
        });

        svg.selectAll('.device').on('mouseover', function (d) {
            svg.selectAll('.ring-arc')
                .style('fill', 'white')
            ;
            svg.selectAll('.device-' + d.device.id)
                .style('fill', colors[d.device.id])
            ;
        });
        svg.selectAll('.device').on('mouseout', function (d) {
            svg.selectAll('.ring-arc')
                .style('fill', function (id) { return colors[id]; })
            ;
        });
    </script>
    {% endif %}

</body>
</html>